{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FirstContext","React","createContext","FirstProvider","state","name","projects","cool","_this2","this","react_default","a","createElement","Provider","value","incrementProjects","setState","decrementProjects","props","children","Component","Family","className","App_Person","Person","Consumer","context","Fragment","onClick","App","App_FirstProvider","class","App_Family","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAIMA,SAAeC,IAAMC,iBAErBC,6MACJC,MAAQ,CACNC,KAAM,MACNC,SAAU,GACVC,KAAM,mFAEC,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACZ,EAAaa,SAAd,CAAuBC,MAAO,CAC5BV,MAAOK,KAAKL,MACZW,kBAAmB,kBAAMP,EAAKQ,SAAS,CACrCV,SAAUE,EAAKJ,MAAME,SAAU,KAEjCW,kBAAmB,kBAAMT,EAAKQ,SAAS,CACrCV,SAAUE,EAAKJ,MAAME,SAAU,OAGhCG,KAAKS,MAAMC,iBAjBQC,aAuBtBC,EAAS,SAACH,GAAD,OACbR,EAAAC,EAAAC,cAAA,OAAKU,UAAU,UACbZ,EAAAC,EAAAC,cAACW,EAAD,QAIEC,mLAGF,OACEd,EAAAC,EAAAC,cAAA,OAAKU,UAAU,UACbZ,EAAAC,EAAAC,cAACZ,EAAayB,SAAd,KAEI,SAACC,GAAD,OACEhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,SAAP,KAEAjB,EAAAC,EAAAC,cAAA,kBAAUc,EAAQtB,MAAMC,MACxBK,EAAAC,EAAAC,cAAA,gCAAwBc,EAAQtB,MAAME,UACtCI,EAAAC,EAAAC,cAAA,kCAA0Bc,EAAQtB,MAAMG,MAJxC,IAIkDG,EAAAC,EAAAC,cAAA,WAClDF,EAAAC,EAAAC,cAAA,UAAQgB,QAASF,EAAQX,kBAAmBO,UAAU,MAAtD,KACAZ,EAAAC,EAAAC,cAAA,UAAQgB,QAASF,EAAQT,kBAAmBK,UAAU,MAAtD,gBAdOF,aAyCNS,mLAbX,OACEnB,EAAAC,EAAAC,cAACkB,EAAD,KACApB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,OAAKmB,MAAM,4BAAX,mDAGArB,EAAAC,EAAAC,cAACoB,EAAD,eATUZ,aChDEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.96a1bd38.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nconst FirstContext = React.createContext();\n\nclass FirstProvider extends Component {\n  state = {\n    name: 'Sai',\n    projects: 40,\n    cool: 'Awesome'\n  }\n  render() {\n    return(\n      <FirstContext.Provider value={{\n        state: this.state,\n        incrementProjects: () => this.setState({\n          projects: this.state.projects +1\n        }),\n        decrementProjects: () => this.setState({\n          projects: this.state.projects -1\n        })\n      }}>\n        {this.props.children}\n      </FirstContext.Provider>\n    )\n  }\n}\n\nconst Family = (props) => (\n  <div className=\"family\">\n    <Person/>\n  </div>\n)\n\nclass Person extends Component {\n\n  render() {\n    return (\n      <div className=\"person\">\n        <FirstContext.Consumer>\n          {\n            (context) => (\n              <React.Fragment>\n\n              <p>Name: {context.state.name}</p>\n              <p>Projects completed: {context.state.projects}</p>\n              <p>Coolness Coeffecient: {context.state.cool}</p> <hr/>\n              <button onClick={context.incrementProjects} className=\"sm\">+</button>\n              <button onClick={context.decrementProjects} className=\"sm\">-</button>\n              \n              </React.Fragment>\n            )\n          }\n        </FirstContext.Consumer>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n\n  render() {\n    return (\n      <FirstProvider>\n      <div className=\"App\">\n        <div class=\"container card card-body\">\n          This is an React 16.7 App for React Context API\n        </div>\n        <Family/>\n      </div>\n      </FirstProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}